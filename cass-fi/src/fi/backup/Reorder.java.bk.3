
package org.fi;

import java.util.*;
import java.io.*;

public class Reorder extends Thread{
	private static LinkedList<Pair<Event, Object>> events;
	private static List<Integer> evtOrder;
	private static Map<String, List<Integer>> nodeToEvtOrder;

	private static List<Integer> evtOrderPfxToTry;
	private static Pair<Integer, Integer> depToTry;
	private static Map<String, Set<Pair<String>>> evtOrdersWDepsInHist; 

	private static int nEvtBeingOrdered;
	private static Set<Event> readEvts;
	private static int nMsgsRecd;
	private static boolean isDepOrdered;

	private static Random randomGen = new Random();
	private static boolean randomnessInQ;

	public static void initBeforeEachExp(){
		Util.MESSAGE("Initialized before an experiment started");

		FMServer.removeWaitStates();
		FMServer.clearQueueToNumElems();

		events = new LinkedList<Pair<Event, Object>>();
		evtOrder = new LinkedList<Integer>();
		nodeToEvtOrder = new HashMap<String, List<Integer>>();
	        nEvtBeingOrdered = 0;
		readEvts = new HashSet<Event>();
		nMsgsRecd = 0;
		isDepOrdered = false;

		randomnessInQ = true;

		evtOrderPfxToTry = null;
		String pfx = Util.fileContentToString(FMLogic.EVT_ORDER_PFX_TO_TRY);
		if((pfx != null) && (!(pfx.trim().equals("")))){
			String[] evtIds = pfx.split("\\s+");
			evtOrderPfxToTry = new LinkedList<Integer>();
			for(String id : evtIds){
				evtOrderPfxToTry.add(Integer.parseInt(id));
			}
		}
		else if(pfx == null){
			File f = new File(FMLogic.START_FLAG);
			if(!f.exists()){
				FMLogic.NORMAL_EXEC = true;
				createWipeOutFlag();
				wakeUpAll();
			}
			else{
				f.delete();
			}
		}

		depToTry = null;
		String dep = Util.fileContentToString(FMLogic.EVT_DEP_TO_TRY);
		if(dep != null){
			dep = dep.trim();
			String[] depIds = dep.split("\\s+");
			depToTry = new Pair<Integer, Integer>(Integer.parseInt(depIds[0]), Integer.parseInt(depIds[1]));
		}
	
		readHistory();
	}


	private static void readHistory(){
		evtOrdersWDepsInHist = new HashMap<String, Set<Pair<String>>>();
		List<String> evtOrdersAlreadyExp = Util.fileContentToList(FMLogic.EVT_ORDER_HISTORY_FILE);
		
		for(String s : evtOrdersAlreadyExp){
			s = s.trim();
			String[] pfxAndDeps = s.split(":");
			String pfx = (pfxAndDeps[0]).trim();
			String deps = (pfxAndDeps[1]).trim();
			String[] depsArr = deps.split("()");
			for(String dep : depsArr){
				dep = dep.trim();
				if(!dep.equals("")){
					String[] fstAndSnd = dep.split(",");
					String fst = (fstAndSnd[0]).trim();
					String snd = (fstAndSnd[1]).trim();
					UnorderedPair<String> p = new UnorderedPair<String>(fst, snd);
					Set<UnorderedPair<String>> depsForPfx = evtOrdersWDepsInHist.get(pfx);
					if(depsForPfx == null){
						depsForPfx = new HashSet<UnorderedPair<String>>();
						evtOrdersWDepsInHist.put(pfx, depsForPfx);
					}
					depsForPfx.add(p);
				}
			}
		}

	}	


	public synchronized static void addEvent(Event e, Object waitObj){
		File f = new File(FMLogic.EXP_START_FLAG);
		if(f.exists()){
			initBeforeEachExp();
			f.delete();
		}
		
		int sz = events.size();
		int idx;
		if(randomnessInQ){
			idx = randomGen.nextInt(sz+1);
		}
		else{
			if(sz >= 2){
				idx = randomGen.nextInt(sz-1);
				idx = idx + 2;
			}
			else
				idx = randomGen.nextInt(sz+1);
		}
		events.add(idx, new Pair(e, waitObj));
		
		if(e.isReadEvent()){
			nMsgsRecd++;
			readEvts.add(e);
		}
	}


	public static void addAndWait(Event e, Object waitObj){
		if(FMLogic.NORMAL_EXEC){
			return;
		}
	
		addEvent(e, waitObj);
		
		synchronized(waitObj){
			try{
				Util.MESSAGE("Making a thread wait here");
				waitObj.wait();
			}
			catch(Exception exp){
				Util.EXCEPTION("Reorder.addAndWait", exp);
			}
		}
	}

	public void run(){
		while(true){
			Util.MESSAGE("In Reorder thread");
			Util.sleep(200);

			if(!FMServer.allWaiting()) continue;

			Set<Pair<Event, Object>> evtsOld = new HashSet<Pair<Event, Object>>(events);
			Util.sleep(500);
			if(!events.equals(evtsOld)) continue;


			Util.MESSAGE("All servers waiting. Going to see if I can wake a thread up");

			
			//TODO: Fix the hack! Hack is for the case when no message has yet been
			//sent or received by any node in the beginning of the system execution
			if((nMsgsRecd > 0) && ((readEvts == null) || (readEvts.size() == 0)) 
					&& FMServer.areQueuesEmpty()){
			        File f = new File(FMLogic.EXP_RUN_FLAG);
				if(f.exists()){
					f.delete();	
					writeHistory();
					writePfx();
					FMServer.removeWaitStates();
					nMsgsRecd = 0;
					wakeUpAll();
				}		
				continue;
			}

				
			Util.MESSAGE("Size of events is " + events.size());
			Event e = wakeUpDepthFirst();
			//Event e = wakeUpDet();
			if(e != null){
				evtOrder.add(e.hashCode());
				String nodeId = e.getNodeId();
				List<Integer> evts = nodeToEvtOrder.get(nodeId);
				if(evts == null){
					evts = new LinkedList<Integer>();
					nodeToEvtOrder.put(nodeId, evts);	
				}
				evts.add(e.hashCodeWONode());
			}
			else{
				Util.MESSAGE("Event was null");
				evtOrder.add(0);
			}
		}
	}

        
	public static Event wakeUpDepthFirst(){
		Util.MESSAGE("Waking up a thread using the depth first method");
	        nEvtBeingOrdered++;

		if(nEvtBeingOrdered == (evtOrderPfxToTry.size() + 1)){
			int idx1 = findEvt(events, depToTry.fst());	
			int idx2 = findEvt(events, depToTry.snd());
			if((idx1 < 0) || (idx2 < 0)){
				wipeOut();
				return null;
			}
			Pair<Event, Object> e2 = events.remove(idx2);
			events.addFirst(e2);
			Pair<Event, Object> e1 = events.remove(idx1);
			events.addFirst(e1);
			synchronized(Reorder.class){
				randomnessInQ = false;
			}
		}
		
		if((evtOrderPfxToTry == null) || (nEvtBeingOrdered > evtOrderPfxToTry.size())){
			Pair<Event, Object> eWObj = events.getFirst();
			letEvtGo(eWObj, true);
			Event eBeingWokenUp = eWObj.fst();
			if((nEvtBeingOrdered == evtOrderPfxToTry.size() + 2) && (eBeingWokenUp != null))
				synchronized(Reorder.class){ randomnessInQ = true; }
			return eBeingWokenUp;
		}

		int evt = evtOrderPfxToTry.get(nEvtBeingOrdered - 1);
		boolean canReproduce = false;
		Pair<Event, Object> eWObj = null;
		
		for(Pair<Event, Object> eobj : events){
			Event et = eobj.fst();
			if(et.hashCode() == evt){
				canReproduce = true;
				eWObj = eobj;
				break;
			}
		}

		if(canReproduce){
			letEvtGo(eWObj, true);					
			return eWObj.fst();	
		}

		wipeOut();
		return null;
		
	}


	private static int findEvt(List<Pair<Event, Object>> evts, Integer eHash){
		if(eHash == null)
			return -1;

		for(int i = 0; i < evts.size(); i++){
			Pair<Event, Object> eWObj = evts.get(i);
			Event e = eWObj.fst();
			if(e.hashCode() == eHash){
				return i;
			}	
		}	

		return -1;
	}

	private static void wipeOut(){
		FMLogic.NORMAL_EXEC = true;
		createWipeOutFlag();
		wakeUpAll();
	}


	private static void letEvtGo(Pair<Event, Object> eWObj, boolean record){
		if(eWObj == null) return;

		Event e = eWObj.fst();
		Object objToNotf = eWObj.snd();
		
		if(objToNotf != null){
			events.remove(eWObj);
			if(e.isReadEvent()){
				readEvts.remove(e);
			}

			if(record){
				String s = "";
				String sDetail = "";
				if(objToNotf != null){
					s += e.hashCode();
					s += " : ";
					List<Event> evts = eWObj.getFstElems(events);
					for(Event evt : evts){
						s += evt.hashCode();
						s += " ";
					}
					s += "\n";


					sDetail += "==================WOKEN UP EVT================\n";
					sDetail += e.toString() + "\n";
					sDetail += " : \n";
					EventComparator ecomp = new EventComparator();
					Collections.sort(evts, ecomp);
					for(Event evt : evts){
						sDetail += evt.toString() + "\n";
					}
					sDetail += "==============================================\n";
				}
				Util.MESSAGE("String being written by the Reorder thread to FMLogic.EVTS_WOKEN is " + s);
				Util.stringToFileContent(s, FMLogic.EVTS_WOKEN, true);
				Util.stringToFileContent(sDetail, FMLogic.EVTS_WOKEN_DET, true);
			}
			
			Util.MESSAGE("Waking up an event here");
			synchronized(objToNotf){objToNotf.notify();}		
			recordCoverage(e);
			String nodeId = e.getNodeId();
			int sid = Util.getIdValFromNodeId(nodeId);
			FMServer.serverNoLongerWaiting(sid);
		}
		else{
			Util.ERROR("The object on which the thread is waiting to block an event is null");
		}

	}


	public static void recordCoverage(Event e){
		int hash = e.hashCode();
		String descStr = e.toString();
		String fName = FMLogic.COVERAGE_COMPLETE_DIR + "h" + hash + ".txt";
		File f = new File(fName);
		
		try{
			f.createNewFile();
			Util.stringToFileContent(descStr, f);
		}
		catch(IOException exp){}
	}


	private static void writeHistory(){
		if((evtOrder != null) && !evtOrder.isEmpty()){
			String order = getStrRep(evtOrder);
			u.stringToFileContent(order, FMLogic.EVT_ORDER_HISTORY_FILE, false, true);
		}
	}

	private static String getStrRep(List<Integer> l){
		String s = "";
		for(Integer i : l){
			if(i != null){
				s += i + " ";
			}
		}
		s = s.trim();
		s += "\n";
		return s;
	}

	private static void writePfx(){

	}


	public static Event wakeUpDet(){
		EventComparator ecomp = new EventComparator();
		List<Pair<Event, Object>> sortedEvts = (new Pair()).sortByFst(events, ecomp);

		Util.stringToFileContent("Concurrent events present\n", "/tmp/fi/concurrentEvts", true);
		for(Pair<Event, Object> e : sortedEvts){
			Util.stringToFileContent(e.fst().toString()+"\n", "/tmp/fi/concurrentEvts", true);
		}
		Util.stringToFileContent("---------------------------\n", "/tmp/fi/concurrentEvts", true);

		LinkedList<Pair<Event, Object>> msgsEvts = new LinkedList<Pair<Event, Object>>();
		for(int i = 0; i < sortedEvts.size(); i++){
			Pair<Event, Object> e = sortedEvts.get(i);
			if((e.fst()).isReadEvent()){
				msgsEvts.add(e);	
			}
		}

		List<Pair<Event, Object>> evtsToConsider = sortedEvts;
		if(!msgsEvts.isEmpty()){
			evtsToConsider = msgsEvts;
		}
		
		Pair<Event, Object> e = null;
		
		for(int i = 0; i < evtsToConsider.size(); i++){
			Pair<Event, Object> evt = evtsToConsider.get(i);
			//For fairness of threads (the same timeout event might get woken up again and again otherwise)
			if(getNumPrevWakeUps(evt) > 2){
				continue;
			}
			else{
				e = evt;
				break;
			}
		}

		if((e == null) && (evtsToConsider.size() > 0)){
			e = evtsToConsider.get(0);
		}

		letEvtGo(e, true);
		return e.fst();
	}

	public static int getNumPrevWakeUps(Pair<Event, Object> eWObj){
		Event e = eWObj.fst();
		String nodeId = e.getNodeId();
		List<Integer> evtOrderForNode = nodeToEvtOrder.get(nodeId);
		int n = 0;
		if(evtOrderForNode != null){
			int eHash = e.hashCodeWONode();
			int s = evtOrderForNode.size();
			for(int i = (s-1); i >= 0; i--){
				int h = evtOrderForNode.get(i);
				if(h != eHash)
					break;
				else
					n++;
			}
		}
		return n;
	}


	public static void wakeUpAll(){
		for(Pair<Event, Object> e : events){
			letEvtGo(e, false);
		}
	}

	public static void createWipeOutFlag(){
		File f = new File(FMLogic.WIPE_OUT_FLAG);
		if(!f.exists()){
			try{
				f.createNewFile();
			}
			catch(Exception e){
				Util.ERROR("Exception thrown while creating the wipe out flag file");
			}
		}
	}

	/**************************************
	
	  private static Event anyEvt(Set<Event> evts){
		ArrayList<Event> al = new ArrayList<Event>(evts);
		EventComparator ecomp = new EventComparator();
		Collections.sort(al, ecomp);
		if(al.size() != 0) return al.get(0);
		return null;
	}


	private static Event evtUsingHistory(Set<Event> evts){
		Util.MESSAGE("In evtUsingHistory");
		String curEvtOrder = "";
		for(Integer e : evtOrder){
			curEvtOrder += e + " ";
		}
		
		for(Event e : evts){
			int eId = e.hashCode();
			String evtOrderWithEId = curEvtOrder + eId;
			if((evtOrdersAlreadyExp == null) || !evtOrdersAlreadyExp.contains(evtOrderWithEId)){
				return e;		
			}			
		}
		
		FMLogic.NORMAL_EXEC = true;
		createWipeOutFlag();
		wakeUpAll();
		return null;
	}


	public static Event wakeUpDepthFirst(){
		Util.MESSAGE("Waking up a thread using the depth first method");
		Event e = null;
	        nEvtBeingOrdered++;

		Util.MESSAGE("nEvtBeingOrdered is " + nEvtBeingOrdered);
		if(evtOrderPfxToTry != null){
			Util.MESSAGE("evtOrderPfxToTry is " + evtOrderPfxToTry);
		}
		else{
			Util.MESSAGE("evtOrderPfxToTry is null");
		}

		ArrayList<Event> sortedevts = new ArrayList<Event>(events);
		EventComparator ecomp = new EventComparator();

		Collections.sort(sortedevts, ecomp);
		Util.MESSAGE("Events present : ");
		for(Event ev : sortedevts){
			Util.MESSAGE("Hash = " + ev.hashCode());
			Util.MESSAGE(ev.toString());
		}
		Util.MESSAGE("==================================================");


		if(evtOrderPfxToTry == null){
			e = anyEvt(events);   
			letEvtGo(e, true);	
			return e;
		}

		if(nEvtBeingOrdered > evtOrderPfxToTry.size()){
			if(nEvtBeingOrdered > (evtOrderPfxToTry.size() + 1)){
				e = anyEvt(events);   
				letEvtGo(e, true);	
			}
			else{
				e = evtUsingHistory(events);
				letEvtGo(e, true);	
			}
		}
		else{
			int evt = evtOrderPfxToTry.get(nEvtBeingOrdered - 1);
			boolean canReproducePfx = false;
			Util.MESSAGE("Need to wake this event up : " + evt);
			for(Event et : events){
				if(et.hashCode() == evt){
					canReproducePfx = true;
					e = et;
					Util.MESSAGE("Waking this event up : " + evt);
					letEvtGo(e, true);						
					break;
				}
			}
			if(!canReproducePfx){
				Util.MESSAGE("Wiping out....cannot reproduce " + evt);
				FMLogic.NORMAL_EXEC = true;
				createWipeOutFlag();
				wakeUpAll();
			}
		}

		return e;
	}

	**************************************/
}

