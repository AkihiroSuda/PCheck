
package org.fi;

import java.util.*;
import java.io.*;

public class Reorder extends Thread{
	private static Map<String, List<MessageContext>> nodeToMessages;
	private static Map<MessageContext, Object> objsToWaitOn;
	private static Set<MessageContext> messages;
	private static List<Integer> msgOrder;
	private static List<Integer> msgOrderPfxToTry;
	private static List<String> msgOrdersAlreadyExp;
	private static int nMsgBeingOrdered;
	private static int nMessagesRecd = 0;

	public static void initBeforeEachExp(){
		Util.MESSAGE("Initialized before an experiment started");

		FMServer.removeWaitStates();

		nodeToMessages = new HashMap<String, List<MessageContext>>();
		objsToWaitOn = new HashMap<MessageContext, Object>();
		messages = new HashSet<MessageContext>();
		msgOrder = new LinkedList<Integer>();
	        nMsgBeingOrdered = 0;
		nMessagesRecd = 0;

		String pfx = Util.fileContentToString(FMLogic.MSG_ORDER_PFX_TO_TRY);
		if((pfx != null) && (!(pfx.trim().equals("")))){
			String[] msgIds = pfx.split("\\s+");
			msgOrderPfxToTry = new LinkedList<Integer>();
			for(String id : msgIds){
				msgOrderPfxToTry.add(Integer.parseInt(id));
			}
		}
		else if(pfx == null){
			File f = new File(FMLogic.START_FLAG);
			if(!f.exists()){
				FMLogic.NORMAL_EXEC = true;
				createWipeOutFlag();
				wakeUpAll();
			}
			else{
				f.delete();
			}
		}

		msgOrdersAlreadyExp = Util.fileContentToList(FMLogic.MSG_ORDER_HISTORY_FILE);
	}


	public synchronized static void addMessage(MessageContext mctx){
		File f = new File(FMLogic.EXP_START_FLAG);
		if(f.exists()){
			initBeforeEachExp();
			f.delete();
		}

		String nodeId = mctx.nodeId;
	        List<MessageContext> msgsForNode = nodeToMessages.get(nodeId);
	        if(msgsForNode == null){
			msgsForNode = new LinkedList<MessageContext>();
			nodeToMessages.put(nodeId, msgsForNode);
		}	
		msgsForNode.add(mctx);
		messages.add(mctx);
		nMessagesRecd++;
	}

	public static void addAndWait(MessageContext mctx, Object waitObj){
		if(FMLogic.NORMAL_EXEC){
			return;
		}
		addMessage(mctx);
	        synchronized(Reorder.class){
			objsToWaitOn.put(mctx, waitObj);
		}
		synchronized(waitObj){
			try{
				Util.MESSAGE("Making a thread wait here");
				waitObj.wait();
			}
			catch(Exception e){
				Util.EXCEPTION("Reorder.addAndWait", e);
			}
		}
	}

	public void run(){
		while(true){
			Util.MESSAGE("In Reorder thread");
			
			if(!FMServer.allWaiting()) continue;

			Set<MessageContext> messagesOld = new HashSet<MessageContext>(messages);
			Util.sleep(500);
			if(!messages.equals(messagesOld)) continue;


			Util.MESSAGE("All servers waiting. Going to see if I can wake a thread up");

			
			//TODO: Fix the hack! Hack is for the case when no message has yet been
			//sent or received by any node in the beginning of the system execution
			if((nMessagesRecd > 0) && ((messages == null) || (messages.size() == 0))){
			        File f = new File(FMLogic.EXP_RUN_FLAG);
				if(f.exists()){
					f.delete();	
					FMServer.removeWaitStates();
					nMessagesRecd = 0;
				}		
				continue;
			}	
				
			Util.MESSAGE("Size of messages is " + messages.size());
			MessageContext mc = wakeUpDepthFirst();
			//MessageContext mc = wakeUpDet();
			if(mc != null){
				msgOrder.add(mc.hashCode());
			        String nId = mc.nodeId;
			        int sid = Integer.parseInt(nId.substring(5));
			}
			else{
				Util.MESSAGE("MessageContext was null");
				msgOrder.add(0);
			}
		}
	}

        
	public static MessageContext wakeUpDepthFirst(){
		Util.MESSAGE("Waking up a thread using the depth first method");
		MessageContext mc = null;
	        nMsgBeingOrdered++;

		Util.MESSAGE("nMsgBeingOrdered is " + nMsgBeingOrdered);
		if(msgOrderPfxToTry != null){
			Util.MESSAGE("msgOrderPfxToTry is " + msgOrderPfxToTry);
		}
		else{
			Util.MESSAGE("msgOrderPfxToTry is null");
		}

		ArrayList<MessageContext> sortedmsgs = new ArrayList<MessageContext>(messages);
		MessageAbstraction mcomp = new MessageAbstraction();
		Collections.sort(sortedmsgs, mcomp);
		Util.MESSAGE("Messages present : ");
		for(MessageContext m : sortedmsgs){
			Util.MESSAGE("Hash = " + m.hashCode());
			Util.MESSAGE(m.toString());
		}
		Util.MESSAGE("==================================================");


		if(msgOrderPfxToTry == null){
			mc = anyMsg(messages);   
			letMsgGo(mc, true);	
			return mc;
		}

		if(nMsgBeingOrdered > msgOrderPfxToTry.size()){
			if(nMsgBeingOrdered > (msgOrderPfxToTry.size() + 1)){
				mc = anyMsg(messages);   
				letMsgGo(mc, true);	
			}
			else{
				mc = msgUsingHistory(messages);
				letMsgGo(mc, true);	
			}
		}
		else{
			int msg = msgOrderPfxToTry.get(nMsgBeingOrdered - 1);
			boolean canReproducePfx = false;
			Util.MESSAGE("Need to wake this message up : " + msg);
			for(MessageContext m : messages){
				if(m.hashCode() == msg){
					canReproducePfx = true;
					mc = m;
					Util.MESSAGE("Waking this message up : " + mc.hashCode());
					letMsgGo(mc, true);						
					break;
				}
			}
			if(!canReproducePfx){
				Util.MESSAGE("Wiping out....cannot reproduce " + msg);
				FMLogic.NORMAL_EXEC = true;
				createWipeOutFlag();
				wakeUpAll();
			}
		}

		return mc;
	}


	private static MessageContext anyMsg(Set<MessageContext> msgs){
		ArrayList<MessageContext> al = new ArrayList<MessageContext>(msgs);
		MessageAbstraction mcomp = new MessageAbstraction();
		Collections.sort(al, mcomp);
		if(al.size() != 0) return al.get(0);
		return null;
	}


	private static MessageContext msgUsingHistory(Set<MessageContext> msgs){
		Util.MESSAGE("In msgUsingHistory");
		String curMsgOrder = "";
		for(Integer m : msgOrder){
			curMsgOrder += m + " ";
		}
		
		for(MessageContext m : msgs){
			int mId = m.hashCode();
			String msgOrderWithMId = curMsgOrder + mId ;
			if((msgOrdersAlreadyExp == null) || !msgOrdersAlreadyExp.contains(msgOrderWithMId)){
				return m;		
			}			
		}
		
		FMLogic.NORMAL_EXEC = true;
		createWipeOutFlag();
		wakeUpAll();
		return null;
	}	



	
	private static void letMsgGo(MessageContext mc, boolean record){
		if(mc == null) return;

		Object objToNotf = objsToWaitOn.get(mc);
		
		if(objToNotf != null){
			messages.remove(mc);
			String nodeId = mc.nodeId;
			List<MessageContext> msgsForNode = (List<MessageContext>)nodeToMessages.get(nodeId);
			if(msgsForNode != null){
				msgsForNode.remove(mc);
			}
			else{
				Util.ERROR("Message being considered not present in the map nodeToMessages");
			}
			objsToWaitOn.remove(mc);

			if(record){
				String s = "";
				String sDetail = "";
				if(objToNotf != null){
					s += mc.hashCode();
					sDetail += "==================WOKEN UP MSG================\n";
					sDetail += mc.toString() + "\n";
					s += " : ";
					sDetail += " : \n";
					for(MessageContext m : messages){
						s += m.hashCode();
						s += " ";
						sDetail += m.toString() + "\n";
					}
					s += "\n";
					sDetail += "==============================================\n";
				}
				Util.MESSAGE("String being written by the Reorder thread to FMLogic.MSGS_WOKEN is " + s);
				Util.stringToFileContent(s, FMLogic.MSGS_WOKEN, true);
				Util.stringToFileContent(sDetail, FMLogic.MSGS_WOKEN_DET, true);
			}
			
			synchronized(objToNotf){
				Util.MESSAGE("Waking up a thread here");
				objToNotf.notify();
				recordCoverage(mc);
				int sid = Util.getIdValFromNodeId(nodeId);
				FMServer.serverNoLongerWaiting(sid);
			}		
		}
		else{
			Util.ERROR("The object on which the thread is waiting to block the reception of a message is null");
		}

	}


	public static void recordCoverage(MessageContext mc){
		int hash = mc.hashCode();
		String descStr = mc.toString();
		String fName = FMLogic.COVERAGE_STATIC_DIR + "h" + hash + ".txt";
		File f = new File(fName);
		
		try{
			f.createNewFile();
			Util.stringToFileContent(descStr, f);
		}
		catch(IOException e){}
	}


	public static MessageContext wakeUpDet(){
		ArrayList<MessageContext> al = new ArrayList<MessageContext>(messages);
		MessageAbstraction mcomp = new MessageAbstraction();
		Collections.sort(al, mcomp);

		Util.stringToFileContent("Concurrent messages present\n", "/tmp/fi/concurrentMsgs", true);
		for(MessageContext m : al){
			Util.stringToFileContent(m.toString()+"\n", "/tmp/fi/concurrentMsgs", true);
		}
		Util.stringToFileContent("---------------------------\n", "/tmp/fi/concurrentMsgs", true);

		MessageContext mc = (MessageContext)al.get(0);
		letMsgGo(mc, true);

		return mc;
	}

	public static void wakeUpAll(){
		for(MessageContext m : messages){
			letMsgGo(m, false);
		}
	}

	public static void createWipeOutFlag(){
		File f = new File(FMLogic.WIPE_OUT_FLAG);
		if(!f.exists()){
			try{
				f.createNewFile();
			}
			catch(Exception e){
				Util.ERROR("Exception thrown while creating the wipe out flag file");
			}
		}
	}

}

