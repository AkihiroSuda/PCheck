
package org.fi;

import java.util.*;
import java.io.*;

public class History{
	public static List<Integer> evtOrderPfxToTry;
	public static Pair<Integer, Integer> depToTry;
	public static String stateToTry;
	public static List<String> evtOrdersInHist;
	public static List<String> stateOrdersInHist;
	public static Map<String, Set<Pair<String, String>>> evtOrdersWDepsInHist = 
		new HashMap<String, Set<Pair<String, String>>>(); 
	public static List<String> depsInHist = new LinkedList<String>();
	public static List<String> depLStatesInHist = new LinkedList<String>();

	public static void readHistory(){
		Util.MESSAGE("Reading history before an experiment started");
		evtOrdersInHist = Util.fileContentToList(FMLogic.EVT_ORDER_HISTORY_FILE);
		stateOrdersInHist = Util.fileContentToList(FMLogic.STATE_ORDER_HISTORY_FILE);
	}


	public static void readPfx(){
		Util.MESSAGE("Reading prefix to replay before an experiment started");

		evtOrderPfxToTry = null;
		String pfx = Util.fileContentToString(FMLogic.EVT_ORDER_PFX_TO_TRY);
		if(pfx != null)
			pfx = pfx.trim();
		if((pfx != null) && (!(pfx.equals("")))){
			String[] evtIds = pfx.split("\\s+");
			evtOrderPfxToTry = new LinkedList<Integer>();
			for(String id : evtIds){
				evtOrderPfxToTry.add(Integer.parseInt(id));
			}
		}
		else if((pfx != null) && pfx.equals("")){
			evtOrderPfxToTry = new LinkedList<Integer>();
		}
		else if(pfx == null){
			File f = new File(FMLogic.START_FLAG);
			if(!f.exists()){
				File fw = new File(FMLogic.LAST_EXP_WIPE_OUT_FLAG);
				if(!fw.exists()){
					//Reorder.setNormalExec();
					//Reorder.createWipeOutFlag();
					//Reorder.wakeUpAll();
					Util.MESSAGE("Wiping out --- 1");
					Reorder.wipeOut();
				}
				else{
					fw.delete();
				}
			}
			else{
				f.delete();
			}
		}


		depToTry = null;
		String dep = Util.fileContentToString(FMLogic.EVT_DEP_TO_TRY);
		if(dep != null){
			dep = dep.trim();
			String[] depIds = dep.split("\\s+");
			depToTry = new Pair<Integer, Integer>(Integer.parseInt(depIds[0]), Integer.parseInt(depIds[1]));
		}


		stateToTry = Util.fileContentToString(FMLogic.STATE_TO_TRY);
		if(stateToTry != null)
			stateToTry = stateToTry.trim();
		
	}

	public static void writeToHistory(List<Integer> evtOrder, List<String> stateOrder){
		if((evtOrder != null) && !evtOrder.isEmpty()){
			String order = getStrRep(evtOrder);
			Util.stringToFileContent(order, FMLogic.EVT_ORDER_HISTORY_FILE, true);
		}

		if((stateOrder != null) && !stateOrder.isEmpty()){
			String order = getStrRep(stateOrder);
			Util.stringToFileContent(order, FMLogic.STATE_ORDER_HISTORY_FILE, true);
		}

		if(evtOrderPfxToTry != null){
			String pfx = getStrRep(evtOrderPfxToTry);
			Util.stringToFileContent(pfx, FMLogic.PFX_TO_TRY_HISTORY, true);
		}

		//if(depToTry != null){
		//	String dep = depToTry.fst() + " " + depToTry.snd() + "\n";
		//	Util.stringToFileContent(dep, FMLogic.DEP_TO_TRY_HISTORY, true);
		//}
	}


	public static String getStrRep(List l){
		String s = "";
		for(Object t : l){
			if(t != null){
				s += t.toString() + " ";
			}
		}
		s = s.trim();
		s += "\n";
		return s;
	}


	public static void writePfx(List<String> evtsWoken, List<String> evtsWokenWONode, List<String> absStates, 
			List<String> absQStates){
		if(evtsWoken != null){
			for(int i = evtsWoken.size() - 2; i >= 0; i--){
				String ewq = evtsWoken.get(i);
				String pfx = getPfx(evtsWoken, i-1);
				String rpfx = getRPfx(evtsWoken, i+1);
				
				String state = absStates.get(i);
				String qstate = absQStates.get(i);

				String ewqWONode = evtsWokenWONode.get(i);
				String pfxWONode = getPfx(evtsWokenWONode, i-1);
				
				Pair<String, String[]> eWONodeAndQ = Parse.getEvtQueue(ewqWONode);
				String eWONode = eWONodeAndQ.fst();
				String[] qWONodeParts = eWONodeAndQ.snd();

				Pair<String, String> eNodeAndHash = Parse.getPairOfEntries(eWONode);
				String eNode = eNodeAndHash.fst();
				String eHashWONode = eNodeAndHash.snd();

				Pair<String, String[]> eAndQ = Parse.getEvtQueue(ewq);
				String e = eAndQ.fst();
				String[] qParts = eAndQ.snd();

				
				for(int j = 0; j < qParts.length; j++){
					String qp = qParts[j];
				        if(!rpfx.contains(qp))
						continue;

					String qpWONode = qWONodeParts[j];
					Pair<String, String> qpNodeAndHash = Parse.getPairOfEntries(qpWONode);
					String qpNode = qpNodeAndHash.fst();
					String qpHashWONode = qpNodeAndHash.snd();

					boolean isNonFairQP = isFairnessViolated(qpNode, qpHashWONode, pfxWONode);
				        if(isNonFairQP)
						continue;

					boolean isNonFairE = isFairnessViolated(eNode, eHashWONode, pfxWONode + " (" + qpNode + "," 
							+ qpHashWONode + ")");
				        if(isNonFairE)
						continue;
					
					boolean areEvtsDep = areDep(qp, e, state, qstate, null, null); 				
					boolean isOrderAlreadyDone = alreadyDone(pfx, state, qp, e, Parse.getNode(qp), Parse.getNode(e));
					if(!isOrderAlreadyDone){
						if(areEvtsDep){
							Util.stringToFileContent(pfx+"\n", FMLogic.EVT_ORDER_PFX_TO_TRY, false);
							Util.stringToFileContent(qp + " " + e + "\n", FMLogic.EVT_DEP_TO_TRY, false);
							Util.stringToFileContent(state + "\n", FMLogic.STATE_TO_TRY, false);
							return;
						}
						else{
							Util.MESSAGE("Events that have not been ordered are not dependent. Not considering them.");
						}
					}
				}	
			}		
		}

		File f = new File(FMLogic.EVT_ORDER_PFX_TO_TRY);
		f.delete();
		f = new File(FMLogic.EVT_DEP_TO_TRY);
		f.delete();
	}


	public static boolean isFairnessViolated(String eNode, String eHashWONode, String pfx){
		int k = Search.kEvtsAllowed;
		pfx = pfx.trim();
		if(pfx.equals("")){
			return false;
		}

		
		String[] pfxParts = pfx.split(" ");
		int n = 0;
		for(int i = pfxParts.length - 1; i >= 0; i--){
			Pair<String, String> nIdHash = Parse.getPairOfEntries(pfxParts[i]);
			String nodeId = nIdHash.fst();
			if(eNode.equals(nodeId)){
				String h = nIdHash.snd();
				if(eHashWONode.equals(h)){
					n++;
					if(n >= (k-1)){
						return true;
					}
				}
				else{
					n = 0;
				}
			}
		}
		return false;
	}
	


	private static String getPfx(List<String> evtsWoken, int idx){
		String pfx = "";
		for(int i = 0; i <= idx; i++){
			String ewq = evtsWoken.get(i);
			String e = ((ewq.split(":"))[0]).trim();
			pfx += e + " ";
		}
		pfx = pfx.trim();
		return pfx;
	}


	private static String getRPfx(List<String> evtsWoken, int idx){
		String rpfx = "";
		for(int i = idx; i < evtsWoken.size(); i++){
			String ewq = evtsWoken.get(i);
			String e = ((ewq.split(":"))[0]).trim();
			rpfx += e + " ";
		}
		rpfx = rpfx.trim();
		return rpfx;
	}


	public static boolean areDep(String e1, String e2, String state, String qstate, Event ev1, Event ev2){
		String[] ss = state.split(":");
		List<Pair<Long, Long>> sStates = new LinkedList<Pair<Long, Long>>();
		for(int i = 0; i < ss.length; i++){
			Pair<String, String> lz = Parse.getPairOfEntries(ss[i]);
			long l = Long.parseLong(lz.fst());
			long z = Long.parseLong(lz.snd());
			sStates.add(new Pair<Long, Long>(l, z));
		}
		//Dep1 d = new Dep1();
		//Dep2 d = new Dep2();
		//Dep3 d = new Dep3();
		//Dep4 d = new Dep4();
		Dep5 d = new Dep5();
		//Dep6 d = new Dep6();
		return d.dep(e1, e2, sStates, qstate, ev1, ev2);	
	}


	private static boolean isDepInHist(String dep, String state, List<String> nodes){
		for(int i = 0; i < depsInHist.size(); i++){
			String dh = depsInHist.get(i);
			String st = depLStatesInHist.get(i);
			if(dh.equals(dep) && eqStates(state, st, nodes))
				return true;
		}	
		return false;
	}


	public static boolean alreadyDone(String pfx, String state, String e1, String e2, String node1, String node2){
		if(e1.equals(e2))
			return true;

		//if(Parse.isPollEvent(e1) && Parse.isPollEvent(e2))
		//	return true;
	
		List<String> nodes = new LinkedList<String>();
		nodes.add(node1);
		nodes.add(node2);

		if(isDepInHist(e1 + " " + e2, state, nodes))
			return true;
		
		if(evtOrdersInHist == null) 
			return false;

		int nHist = evtOrdersInHist.size();
		for(int i = 0; i < nHist; i++){
			String h = evtOrdersInHist.get(i);
			String st = stateOrdersInHist.get(i);
			boolean b = isOrderPresent(h, st, e1, e2, state, nodes, pfx);
			if(b) return true;
		}

		return false;
	}


	public static boolean isOrderPresent(String h, String st, String e1, String e2, String state, 
			List<String> nodes, String pfx){
		//if(h.startsWith(pfx)){
			//String hAfterPfx = h.substring(pfx.length());
			String hAfterPfx = h;
			hAfterPfx = hAfterPfx.trim();
			String stAfterPfx = st;
			stAfterPfx = stAfterPfx.trim();	
		
			String[] hParts = hAfterPfx.split(" ");
			String[] stParts = stAfterPfx.split(" ");
			int last = hParts.length - 1;
			int start = 0;

			while(start <= last){
				int e1Idx = indexOfEvtWState(hParts, stParts, start, e1, state, nodes);
				
				if(e1Idx != -1){
					int e2Idx = indexOfEvtWOStChange(hParts, stParts, e1Idx+1, e2, nodes);
					
					if(e2Idx != -1){
						//Set<Pair<String, String>> deps = evtOrdersWDepsInHist.get(pfx);
						//if(deps == null){
						//	deps = new HashSet<Pair<String, String>>();
						//	evtOrdersWDepsInHist.put(pfx, deps);
						//}
						//Pair<String, String> d = new Pair<String, String>(e1, e2);
						//deps.add(d);
						
						String dStr = e1 + " " + e2;
						markDepAsCovered(dStr, state);
						
						return true;
					}
					start = (e1Idx+1);
				}
				else{
					return false;
				}
			}
		//}
		return false;
	}



	public static int indexOfEvtWState(String[] eParts, String[] stParts, int start, String e, String st, List<String> nodes){
		for(int i = start; i < eParts.length; i++){
			if(eParts[i].equals(e) && eqStates(stParts[i], st, nodes)){
				return i;
			}
		}
		return -1;
	}


	public static int indexOfEvtWOStChange(String[] eParts, String[] stParts, int start, String e, List<String> nodes){
		String prevState = null;
		for(int i = start; i < eParts.length; i++){
			if(prevState != null){
				if(!eqStates(prevState, stParts[i], nodes))
					return -1;
			}
			if(eParts[i].equals(e)){
				return i;		
			}
			prevState = stParts[i];
		}
		return -1;
	}



	private static boolean eqStates(String s1, String s2, List<String> nodes){
		Map<String, String> s1m = getStateAsMap(s1);
		Map<String, String> s2m = getStateAsMap(s2);
		for(String n : nodes){
			String l1 = s1m.get(n);
			String l2 = s2m.get(n);
			boolean eq = ((l1 == null) ? (l2 == null) : l1.equals(l2));
			if(!eq)
				return false;
		}
		return true;
	}



	private static Map<String, String> getStateAsMap(String s){
		s = s.trim();
		String[] sParts = s.split(":");
		Map<String, String> sm = new HashMap<String, String>();
		for(int i = 0; i < sParts.length; i++){
			String sp = sParts[i];
			Pair<String, String> lz = Parse.getPairOfEntries(sp);
			sm.put("Node-"+(i+1), lz.fst());
		}
		return sm;
	}



	public static void markDepAsCovered(String dStr, String state){
		for(int i = 0; i < depsInHist.size(); i++){
			String d = depsInHist.get(i);
			String s = depLStatesInHist.get(i);
			if(d.equals(dStr) && s.equals(state))
				return;
		}	

		depsInHist.add(dStr);
		depLStatesInHist.add(state);
	}



	public static void recordCoverage(Event e){
		int hash = e.hashCode();
		String descStr = e.toString();
		String fName = FMLogic.COVERAGE_COMPLETE_DIR + "h" + hash + ".txt";
		File f = new File(fName);
		
		try{
			f.createNewFile();
			Util.stringToFileContent(descStr, f);
		}
		catch(IOException exp){}
	}



	public static void recordEvtWoken(List<Pair<Event, Object>> events, Event e, Object objToNotf, 
			List<String> evtsWoken, List<String> evtsWokenWONode, List<String> absStates, 
			List<String> absQStates){
		if(objToNotf == null)
			return;
		
		List<Event> evts = (new Pair()).getFstElems(events);
		
		String s = getQueueStr(e, evts, true);
		evtsWoken.add(s.trim());
		Util.stringToFileContent(s, FMLogic.EVTS_WOKEN, true);


		String sWONode = getQueueStr(e, evts, false);
		evtsWokenWONode.add(sWONode.trim());
		Util.stringToFileContent(sWONode, FMLogic.EVTS_WOKEN_WO_NODE, true);
		
		
		String sDetail = "";
		sDetail += "==================WOKEN UP EVT (" + evtsWoken.size()  + ")================\n";
		sDetail += e.toString() + "\n";
		sDetail += " : \n";
		EventComparator ecomp = new EventComparator();
		Collections.sort(evts, ecomp);
		for(Event evt : evts){
			sDetail += evt.toString() + "\n";
		}
		sDetail += "==============================================\n";
		Util.stringToFileContent(sDetail, FMLogic.EVTS_WOKEN_DET, true);
		
		
		String state = AState.getStateOfLeaders();
		absStates.add(state.trim());
		Util.stringToFileContent(state+"\n", FMLogic.EXEC_STATE, true);


		String qState = AState.getStateOfQueues();
		absQStates.add(qState);
		Util.stringToFileContent(qState+"\n", FMLogic.QUEUE_STATE, true);
			
	}

	
	public static void recordLocalEvt(Event e){
		String sDetail = "";
		sDetail += "==================WOKEN UP EVT================\n";
		sDetail += e.toString() + "\n";
		sDetail += " : \n";
		sDetail += "==============================================\n";
		Util.stringToFileContent(sDetail, FMLogic.EVTS_WOKEN_DET, true);
			
	}
	


	private static String getQueueStr(Event e, List<Event> q, boolean inclNode){
		String s = "";
		String eh = (inclNode? (new Integer(e.hashCode())).toString() : "(" + e.getNodeId() + "," + 
				e.hashCodeWONodeStack() + ")");
		s += eh;
		s += " : ";
		for(Event evt : q){
		       String evth = (inclNode? (new Integer(evt.hashCode())).toString() : 
				       "(" + evt.getNodeId() + "," + evt.hashCodeWONodeStack() + ")");
		       s += evth;
		       s += " ";
		}
		s = s.trim();
		s += "\n";
		return s;
	}

}

