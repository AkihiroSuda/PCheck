
package org.fi;

import java.util.*;
import java.io.*;

public class Reorder extends Thread{
	public static LinkedList<Pair<Event, Object>> events;
	public static LinkedList<Pair<Event, Object>> readEvts;
	public static int nMsgsRecd;
	
	public static List<Integer> evtOrder;
	public static List<Event.EType> eTypeOrder;
	public static List<String> eNodeOrder;

	public static List<String> stateOrder;
	public static Map<String, List<Integer>> nodeToEvtOrder;
	public static List<String> evtsWoken;
	public static List<String> evtsWokenWONode;
	public static List<String> absStates;
	public static List<String> absQStates;
	public static int nEvtBeingOrdered;

	public static long seed = 23418;
	public static Random randomGen = new Random(seed);
	public static boolean randomnessInQ;

	public static void initBeforeEachExp(){
		Util.MESSAGE("Initialized before an experiment started");

		FMServer.removeWaitStates();
		FMServer.clearQueueToNumElems();
		//AState.clearState();

		resetNormalExec();

		events = new LinkedList<Pair<Event, Object>>();
		readEvts = new LinkedList<Pair<Event, Object>>();
		resetNMsgsRecd();

		evtOrder = new LinkedList<Integer>();
		eTypeOrder = new LinkedList<Event.EType>();
		eNodeOrder = new LinkedList<String>();

		stateOrder = new LinkedList<String>();
		nodeToEvtOrder = new HashMap<String, List<Integer>>();
		evtsWoken = new LinkedList<String>();
		evtsWokenWONode = new LinkedList<String>();
		absStates = new LinkedList<String>();
		absQStates = new LinkedList<String>();
		nEvtBeingOrdered = 0;

		randomnessInQ = true;

		History.readHistory();
		History.readPfx();
		Search.initBeforeEachExp();
	}


	public static void addEvent(Event e, Object waitObj){
		int sz = events.size();
		int idx;

		/************
		if(randomnessInQ){
			idx = randomGen.nextInt(sz+1);
		}
		else{
			if(sz >= 2){
				idx = randomGen.nextInt(sz-1);
				idx = idx + 2;
			}
			else
				idx = sz;
		}
		*************/
		idx = sz;

		Pair ep = new Pair(e, waitObj);

		events.add(idx, ep);
		
		if(e.isReadEvent()){
			nMsgsRecd++;
			readEvts.add(ep);
		}
	}


	public static void addAndWait(Event e, Object waitObj){
		synchronized(Reorder.class){
			File f = new File(FMLogic.EXP_START_FLAG);
			if(f.exists()){
				initBeforeEachExp();
				f.delete();
			}
		
			if(isNormalExec()){
				return;
			}

			addEvent(e, waitObj);
		}
		
		synchronized(waitObj){
			try{
				Util.MESSAGE("Making a thread wait here");
				waitObj.wait();
			}
			catch(Exception exp){
				Util.EXCEPTION("Reorder.addAndWait", exp);
			}
		}
	}

	public void run(){
		while(true){
		    try{
			Util.MESSAGE("In Reorder thread");
		
			if(isElectionOver()){
				wakeUpAll();
				continue;
			}

			if(!FMServer.allWaiting()) {Util.sleep(200); continue;}
			

			List<Pair<Event, Object>> evtsOld;
			synchronized(Reorder.class){
				evtsOld = new LinkedList<Pair<Event, Object>>(events);
			}
			
			Util.sleep(200);

			boolean noNewEvt;
			boolean readMsgRecd;
			boolean noReadEvts;
			int nEvts = 0;
			synchronized(Reorder.class){
				noNewEvt = events.equals(evtsOld);
				readMsgRecd = (nMsgsRecd > 0);
				noReadEvts = ((readEvts == null) || (readEvts.size() == 0));
				if(events != null) nEvts = events.size();
			}


			if(!noNewEvt || (nEvts == 0)) {
				continue;
			}


			Util.MESSAGE("All servers waiting. Going to see if I can wake a thread up. Size of events is " 
					+ nEvts);

			if(readMsgRecd && noReadEvts && FMServer.areQueuesEmpty()){
				Util.MESSAGE("Going to wake up all servers");
				FMServer.removeWaitStates();
				resetNMsgsRecd();
				AState.clearState();
				setNormalExec();
				finishElection();
				wakeUpAll();
				continue;
			}
				
			/************************************************************************************
			//TODO: Fix the hack! Hack is for the case when no message has yet been
			//sent or received by any node in the beginning of the system execution
			if(readMsgRecd && noReadEvts && FMServer.areQueuesEmpty()){
			        File f = new File(FMLogic.EXP_RUN_FLAG);
				if(f.exists()){
					setNormalExec();
					History.writeToHistory(evtOrder, stateOrder);
					History.writePfx(evtsWoken, evtsWokenWONode, absStates, absQStates);
					FMServer.removeWaitStates();
					resetNMsgsRecd();
					AState.clearState();
					wakeUpAll();
					f.delete();
				}		
				continue;
			}
			else{
				if(!readMsgRecd){
					Util.MESSAGE("nMsgsRecd <= 0");
				}
				else if(!noReadEvts){
					Util.MESSAGE("readEvts != null and readEvts.size() != 0");
				}
			}

			if(nEvts == 0) continue;
			************************************************************************************/
			

			//Pair<Event, String> eWSt = Search.wakeUpDepthFirst();
			//Pair<Event, String> eWSt = Search.wakeUpDet();
			//Pair<Event, String> eWSt = Search.wakeUpRandom();
			Pair<Event, String> eWSt = Search.wakeUpPrioritizedNode();
			
			if(eWSt != null){
				Event e = eWSt.fst();
				String state = eWSt.snd();

				evtOrder.add(e.hashCode());
				eTypeOrder.add(e.t);
				eNodeOrder.add(e.getNodeId());
				stateOrder.add(state);
				
				String nodeId = e.getNodeId();
				List<Integer> evts = nodeToEvtOrder.get(nodeId);
				if(evts == null){
					evts = new LinkedList<Integer>();
					nodeToEvtOrder.put(nodeId, evts);	
				}
				evts.add(e.hashCodeWONodeStack());
			}
			else{
				Util.MESSAGE("Event was null");
				evtOrder.add(0);
				stateOrder.add("[]");
			}
		   }
	           catch(Exception e){
			Util.EXCEPTION("Reorder.run", e);
		   }	   
		}
	}

        
	public static void letEvtGo(Pair<Event, Object> eWObj, boolean record){
		if(eWObj == null) return;

		Event e = eWObj.fst();
		Object objToNotf = eWObj.snd();
		
		if((e != null) && (objToNotf != null)){
			synchronized(Reorder.class){
				events.remove(eWObj);
				if(e.isReadEvent()){
					readEvts.remove(eWObj);
				}

				if(record){
					//if(e.isPollEvent()){
					//	boolean b = FMServer.areQueuesEmpty();
					//	Util.MESSAGE("Going to record the event " + e);
					//}
					History.recordEvtWoken(events, e, objToNotf, evtsWoken, evtsWokenWONode, absStates, absQStates);	
					History.recordCoverage(e);
				}
			}
			
			synchronized(objToNotf){objToNotf.notify();}		
			
			String nodeId = e.getNodeId();
			int sid = Util.getIdValFromNodeId(nodeId);
			FMServer.serverNoLongerWaiting(sid);
		}
		else{
			Util.ERROR("The object on which the thread is waiting to block an event is null");
		}

	}


	public static void wakeUpAll(){
		List<Pair<Event, Object>> evts = null;
		synchronized(Reorder.class){
			if(events.isEmpty())
				return;
			evts = new LinkedList<Pair<Event, Object>>(events);
		}
		for(Pair<Event, Object> e : evts){
			letEvtGo(e, false);
		}
	}


	public static void endElection(){
		File f = new File(FMLogic.EXP_RUN_FLAG);
		if(f.exists()){
			f.delete();
			History.writeToHistory(evtOrder, stateOrder);
			History.writePfx(evtsWoken, evtsWokenWONode, absStates, absQStates);
		}
	}


	public static void wipeOut(){
		File f = new File(FMLogic.EXP_RUN_FLAG);
		if(f.exists()){
			Util.MESSAGE("Wiping out");
			setNormalExec();
			createWipeOutFlag();
			FMServer.removeWaitStates();
			resetNMsgsRecd();
			AState.clearState();
			wakeUpAll();
			f.delete();
		}
	}
	
	public static void createWipeOutFlag(){
		File f = new File(FMLogic.WIPE_OUT_FLAG);
		if(!f.exists()){
			try{
				f.createNewFile();
			}
			catch(Exception e){
				Util.ERROR("Exception thrown while creating the wipe out flag file");
			}
		}
	}

	public static synchronized boolean isNormalExec(){
		return FMLogic.NORMAL_EXEC;
	}

	public static synchronized void setNormalExec(){
		FMLogic.NORMAL_EXEC = true;
	}
	
	public static synchronized void resetNormalExec(){
		FMLogic.NORMAL_EXEC = false;
	}

	public static synchronized void resetNMsgsRecd(){
		nMsgsRecd = 0;
	}

	public static void finishElection(){
		Util.createNewFile(FMLogic.ELECTION_OVER);
	}

	public static boolean isElectionOver(){
		return (new File(FMLogic.ELECTION_OVER)).exists();
	}
}

